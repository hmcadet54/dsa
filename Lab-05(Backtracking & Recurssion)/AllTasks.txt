Task-1:
Generate the following sequence with recursive approach
1 , 3 , 6 , 10 , 15 , 21 , 28 . . . .


Task-2:
a. Write a indirect recursive code for the above task-1 (b) part with same approach as
defined in the above sample code of In-Direct Recursion


Task 3:
Sort The Unsorted Numbers with both tail recursive and Normal recursive approach
Sample Input and Output
Given array is
12 11 13 5 6 7
Sorted array is
5 6 7 11 12 13



Task 4:
Generate the following series using nested recursion
0
1
1
2
3
5
8
13
21
34



Task-5 (Note this question holds the majority of weightage)
A Maze is given as n*n matrix of blocks where source block is the upper left
most block i.e., matrix[0][0] and destination block is lower rightmost block
i.e., matrix[n-1][n-1]. A rat starts from source and has to reach the destination.
The rat can move in only two directions: first forward if possible or down. If
multiple solutions exist, the shortest earliest hop will be accepted. For the
same hop distance at any point, forward will be preferred over downward. In
the maze matrix, 0 means the block is the dead end and non-zero number
means the block can be used in the path from source to destination. The non-
zero value of mat[i][j] indicates number of maximum jumps rat can make from
cell mat[i][j]. In this variation, Rat is allowed to jump multiple steps at a time
instead of 1. Find a matrix which describes the position the rat to reach at the
destination.
 
Example:
Input: {{2,1,0,0},{3,0,0,1},{0,1,0,1},
{0,0,0,1}}
Output: {{1,0,0,0},{1,0,0,1},{0,0,0,1},
{0,0,0,1}}
Explanation: Rat started with matrix[0][0] and
can jump up to 2 steps right/down. First check
matrix[0][1] as it is 1, next check
matrix[0][2] ,this won&#39;t lead to the solution.
Then check matrix[1][0], as this is 3(non-zero)
,so we can make 3 jumps to reach matrix[1][3].
From matrix[1][3] we can move downwards taking
1 jump each time to reach destination at
matrix[3][3].