Task # 1(a): Add a node at the end of a Singly Linked List.
Task # 1(b): Add a node at the front of a Singly Linked List (Prepend a new node)
Task # 2: Add a node after a given node in a Singly Linked List
Task # 3
Delete a node from a Singly Linked List
- Delete Last node
- Delete any other node

Task # 4
Update a node in a Singly Linked List
Consider a singly linked list 4 ->  1 ->  5 - >  7 ->  2 and want to update the node 7 to 6. The List should be
transformed as.
4 ->  1 ->  5->  6 ->  2

Task # 5
Solve the following problem using a Singly Linked List.
Given a Linked List of integers, write a function to modify the linked list such that all even numbers
appear before all the odd numbers in the modified linked list. Also, keep the order of even and odd
numbers same.
Examples:
Input: 17-> 15-> 8-> 12-> 10-> 5-> 4-> 1-> 7-> 6-> NULL
Output: 8-> 12-> 10-> 4-> 6-> 17-> 15-> 5-> 1-> 7-> NULL
Input: 8-> 12-> 10-> 5-> 4-> 1-> 6-> NULL
Output: 8-> 12-> 10-> 4-> 6-> 5-> 1-> NULL
// If all numbers are even then do not change the list
Input: 8-> 12-> 10-> NULL
Output: 8-> 12-> 10-> NULL
// If all numbers are odd then do not change the list
Input: 1-> 3-> 5-> 7-> NULL
Output: 1-> 3-> 5-> 7-> NULL

Task # 6
Solve the following problem using a Singly Linked List.
Given a Linked List of integers or string, write a function to check if the entirety of the linked list is a
palindrome or not
Examples:
Input: 1-> 0-> 2-> 0-> 1-> NULL
Output: Linked List is a Palindrome

Input: B-> O-> R-> R-> O-> W-> O-> R-> R-> O-> B-> NULL
Output: Linked List is a Palindrome