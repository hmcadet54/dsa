Task-1:
Create a circular link list and perform the mentioned tasks.
i. Insert a new node at the end of the list.
ii. Insert a new node at the beginning of list.
iii. Insert a new node at given position.
iv. Delete any node.
v. Print the complete circular link list.


Task-2:
Create a doubly link list and perform the mentioned tasks.
i. Insert a new node at the end of the list.
ii. Insert a new node at the beginning of list.
iii. Insert a new node at given position.
iv. Delete any node.
v. Print the complete doubly link list.



Task-3:
Create a circular Double link list and perform the mentioned tasks.
i. Insert a new node at the end of the list.
ii. Insert a new node at the beginning of list.
iii. Insert a new node at given position.
iv. Delete any node.
v. Print the complete circular double link list.



Task-4:
Give an efficient algorithm for concatenating two doubly linked lists L and M, with head and tail preserved
nodes, into a single list that contains all the nodes of L followed by all the nodes of M.



Task-5:
Given a Double Circular Linked List 1-7-4-2-6-4-5-3-9-8 your tasks is to swap the nodes (not values) given
their indexes along with its previous and next pointers.
Input: Enter two nodes keys = 3 7
Output:
Initial Linked List = 1-7-4-2-6-4-5-3-9-8
After Swapping = 1-7-4-3-6-4-5-2-9-8


Task-6:
Given a linked list, you have to perform the following task:

1. Extract the alternative nodes starting from second node.
2. Reverse the extracted list.
3. Append the extracted list at the end of the original list.
Note: Try to solve the problem without using any extra memory.
Example 1:
Input:
LinkedList = 10->4->9->1->3->5->9->4
Output:
10 9 3 9 4 5 1 4
Explanation:
Alternative nodes in the given linked list are 4,1,5,4. Reversing the alternative nodes from the given list, and
then appending them to the end of the list results in a list 10->9->3->9->4->5->1->4.