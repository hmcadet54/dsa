1-searching in string using scasb
3- cmp of two string using smpsb
4- manually reversing string
6- frequency of characcter
last- read and writestring	
last- radom number genrators


TASK_01

include irvine32.inc

.data
    str1 BYTE "127&j~3@^&*@*@45^", 0
    pmp BYTE "Found at Index: ", 0

.code
searching PROC
    cld
    mov edi, OFFSET str1
    mov al, '@'
    mov ecx, LENGTHOF str1
    repne scasb

    jne not_found
    mov edx, OFFSET pmp
    call WriteString
    mov eax, LENGTHOF str1 - 1
    sub eax, ecx
    call WriteInt ; Display the index
    jmp done

not_found:
    mov eax, -1

done:
    ret ; Return from the procedure

searching ENDP

main PROC
    call searching

    exit
main ENDP

end main

============================================================================

Task 02

include irvine32.inc

.data
    str1 BYTE "127&j~3@^&*@*@45^", 0
    pmp BYTE "Found at Index: ", 0

.code
searching PROC USES edi ecx, pStr:PTR BYTE, searchChar:BYTE
    cld
    mov edi, OFFSET str1
    mov al, '@'
    mov ecx, LENGTHOF str1
    repne scasb

    jne not_found
    mov edx, OFFSET pmp
    call WriteString
    mov eax, LENGTHOF str1 - 1
    sub eax, ecx
    call WriteInt ; Display the index
    jmp done

not_found:
    mov eax, -1

done:
    ret ; Return from the procedure

searching ENDP

main PROC
    call searching
	mov edi, offset str1
	mov al, '@'
    exit
main ENDP

end main
=================================================================================

TASK_03

include irvine32.inc

.data
    source BYTE 'Abdullah',0
    target BYTE 'Abdullah',0
    strSmall BYTE "STRING-1 is smaller",0
    strGreat BYTE "STRING-1 is greater",0
    strEqual BYTE "both strings are equal",0

.code
main PROC
    cld
    mov esi, OFFSET source
    mov edi, OFFSET target
    mov ecx, LENGTHOF source
    repe cmpsb 

    jb source_smaller 
    ja source_greater 

    mov edx, OFFSET strEqual
    jmp done

source_smaller:
    mov edx, OFFSET strSmall
    jmp done

source_greater:
    mov edx, OFFSET strGreat

done:
    call WriteString
    call Crlf
    exit

main ENDP

end main

==========================================================================

Task-04

INCLUDE Irvine32.inc

.data

string1 byte "abdullah",0
count= lengthof string1
reversed byte count,0
    
.code
main PROC

call reverse
   
    exit
main ENDP

reverse proc
mov esi,0
mov ecx, lengthof string1
l1:
movzx eax, [string1+esi]
inc esi
push eax
loop l1
mov ecx, lengthof string1
l2:
pop eax
mov reversed, al
mov edx, offset reversed
call writestring
loop l2

ret
reverse endp

END main

=====================================================================

Task-06

INCLUDE Irvine32.inc

Get_frequency proto :DWORD, :DWORD

.data
  target BYTE "AAEBDCFBBC", 0
  freqTable DWORD 256 DUP (0)

.code
main PROC
  INVOKE Get_frequency, ADDR target, ADDR freqTable
  mov edx, OFFSET freqTable
  mov ecx, 6
L1:
  mov eax, [edx]
  call WriteDec
  call Crlf
  add edx, 4
  loop L1
  exit
main ENDP

Get_frequency PROC,
  target_address :dword,
  freqTable_address :dword
  mov esi, target_address
  mov edi, freqTable_address
  mov ecx, lengthof target
  mov eax, 0
  mov ebx, 0
  mov edx, 0
L1:
  mov al, [esi]
  cmp al, 'A'
  je Increment_A
  cmp al, 'B'
  je Increment_B
  cmp al, 'C'
  je Increment_C
  cmp al, 'D'
  je Increment_D
  cmp al, 'E'
  je Increment_E
  cmp al, 'F'
  je Increment_F
  jmp L2

Increment_F:	
  inc DWORD PTR [edi + 20]
  jmp L2
Increment_A:
  inc DWORD PTR [edi]
  jmp L2
Increment_B:
  inc DWORD PTR [edi + 4]
  jmp L2
Increment_C:
  inc DWORD PTR [edi + 8]
  jmp L2
Increment_D:
  inc DWORD PTR [edi + 12]
  jmp L2
Increment_E:
  inc DWORD PTR [edi + 16]
  jmp L2

L2:
  inc esi
  loop L1
  ret
Get_frequency ENDP

END main

================================================================================

INCLUDE Irvine32.inc

.DATA
    bufferSize = 100
    inputString BYTE bufferSize DUP(?)
    promptMsg BYTE "Enter a string: ", 0

.CODE
main PROC
    mov edx, OFFSET promptMsg   ; Display prompt message
    call WriteString

    mov edx, OFFSET inputString ; Buffer to store input string
    mov ecx, bufferSize          ; Maximum characters to read
    call ReadString

    mov edx, OFFSET inputString ; Display the entered string
    call WriteString

    call Crlf                   ; Move to the next line

    mov eax, 0                  ; Exit code 0
    call DumpRegs               ; Display register values
    exit
main ENDP

END main

==================================================================

include irvine32.inc
.data

count DWORD ?					; sum of random numbers generated in array
numArray DWORD 22 DUP ('xxxx')			; max array space, max index range counted using variable count
upperB DWORD ?
lowerB DWORD ?
loopCounter DWORD ?
.code
main proc
	call Randomize
	mov ecx, 50
	loop50:
		mov eax, 100; upper boundary
		mov ebx, -300; lower boundary
		call BetterRandomRange				
		call WriteInt
		call Crlf
		loop loop50
	call WaitMsg
	Invoke ExitProcess, 0
main endp

BetterRandomRange proc				; generate a list of 2 - 22 random numbers and randomly choose 1
	mov DWORD PTR [loopCounter], ecx
	lea esi, numArray
	
	mov edx, eax
	call RangeLoop				; process upper boundary, eax already set
	
	mov DWORD PTR [count], 0		; clear count loop
	mov eax, ebx				; process lower boundary
	mov edx, eax
	call RangeLoop			

	mov eax, count				; pick random number from array of random numbers
	call RandomRange
	mov eax, numArray[eax * TYPE numArray]
	mov ecx, DWORD PTR[loopCounter]
	ret
BetterRandomRange endp


RangeLoop proc					; Generate range of random numbers and pick one. input : eax, output : eax
	test eax, eax				; do negative random number generation using neg instructions
	jns PositiveRange
	
	NegativeRange:
		call Random10
		mov ecx, eax
		add DWORD PTR[count], eax			
	
		loopN: 
		mov eax, edx
		neg eax
		call RandomRange
		neg eax	
		mov DWORD PTR [esi], eax
		add esi, TYPE numArray
		loop loopN
		jmp exitRangeLoop

	PositiveRange:				; do positive range calculation							
		call Random10
		mov ecx, eax
		add DWORD PTR[count], eax			

		loopP:
		mov eax, edx
		call RandomRange		; store random numbers in stack
		mov DWORD PTR[esi], eax
		add esi, TYPE numArray
		loop loopP

	exitRangeLoop:
	ret
RangeLoop endp


Random10 proc					; generate random number 1 - 11 input: eax, ouput : eax
	mov eax, 10
	call RandomRange
	add eax, 1					
	ret
Random10 endp

end main





===========================================================
1-cousul app
2- add utility files.asm same name
3-Build dependies tick MAS
4-utility file propeties change genral MACRO ASSEMBLE


#include <stdio.h>
extern "C" void THREE_POD();
int main()
{

    unsigned long VAR1, VAR2, VAR3, res;
    printf("Enter 3 numbers : \n");
    scanf_s("%d %d %d", &VAR1, &VAR2, &VAR3); // in scanf_s it is necessary to
    _asm
    {
        MOV EAX, VAR1
        MOV EBX, VAR2
        MOV EcX, VAR3
    }

    THREE_POD();
    _asm
    {
        mov res, eax
    }

    printf("\n Result = %d ", res);
    return 0;
}




.686
.MODEL FLAT, C
.STACK 2048

.CODE

THREE_POD PROC

mul ebx
mul ecx

ret
THREE_POD ENDP
END


============================================================